{"version":3,"sources":["static/background.jpg","redux/login/action.types.js","redux/login/action.js","constants.js","components/GoogleLogoutButton.js","components/Header.js","components/GoogleLoginButton.js","routes/index/index.js","routes/home/index.js","routes/profile/index.js","components/AuthenticatedRoute.js","App.js","serviceWorker.js","redux/login/reducer.js","redux/login/saga.js","redux/user/action.types.js","redux/user/action.js","redux/user/saga.js","redux/store.js","index.js"],"names":["module","exports","LoginConsts","LOGIN_SUCCESS","LOGIN_FAILED","LOGGING_IN","LOGOUT_SUCCESS","LOGOUT_FAILED","LoginFailure","error","type","LoginAction","LOGINFAILURE","payload","CLIENT_ID","GoogleLogoutButton","props","logout","response","console","log","LogoutSuccess","logoutfail","LogoutFailure","state","isLoggedIn","this","clientId","buttonText","onLogoutSuccess","onFailure","render","renderProps","NavLink","onClick","disabled","React","Component","connect","login","Header","Navbar","light","expand","color","className","Container","NavbarBrand","href","GoogleLoginButton","LoggingIn","handleLoginFailure","onSuccess","Button","outline","style","width","dispatch","accessToken","Index","to","Row","Col","xs","size","offset","sm","md","textAlign","backgroundColor","height","withRouter","Home","Profile","AuthenticatedRoute","App","backgroundImage","background","backgroundSize","path","component","Boolean","window","location","hostname","match","initState","errorMsg","loggingIn","loginWithServer","LoginWithServer","action","fetch","method","headers","body","JSON","stringify","then","json","catch","loginToken","localStorage","setItem","put","takeEvery","UserConsts","LOAD_USER_SUCCESS","LOAD_USER_FAILED","LOADING_USER","LoadUserSuccess","user","loadUser","LoadUser","getItem","LoadUserFailure","sagaMiddleWare","createSagaMiddleware","store","createStore","combineReducers","applyMiddleware","logger","sagas","all","LoginSaga","UserSaga","run","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.aae9441f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.29a7fea0.jpg\";","const LoginConsts ={\n    LOGIN_SUCCESS:\"LoginSuccess\",\n    LOGIN_FAILED: \"LoginFailure\",\n    LOGGING_IN:\"LoggingIn\",\n    LOGOUT_SUCCESS:\"LogoutSuccess\",\n    LOGOUT_FAILED: \"LogoutFailure\"\n};\n\n\nexport default LoginConsts;","import LoginAction from './action.types';\n\nexport const LoggingIn=(user)=>({\n    type:LoginAction.LOGGING_IN,\n    payload:user.accessToken\n})\n\nexport const LoginSuccess=(user)=>({\n    type:LoginAction.LOGIN_SUCCESS,\n    payload:user[\"access-token\"]\n})\n\nexport const LoginFailure=(error)=>({\n    type:LoginAction.LOGINFAILURE,\n    payload:error.error\n})\n\nexport const LogoutFailure=(error)=>({\n    type:LoginAction.LOGOUT_FAILED,\n    payload:error.error\n})\nexport const LogoutSuccess=()=>({\n    type:LoginAction.LOGOUT_SUCCESS\n})\n// export const LOGIN=()=>(dispatch)=>{\n//     dispatch(LOGGING_IN())\n\n// }","export const CLIENT_ID=\"550834628183-e6b28mho8aka4u3587li44oc9crhk2dd.apps.googleusercontent.com\"","import React from 'react'\nimport {GoogleLogout, useGoogleLogout } from 'react-google-login'\nimport { Button, NavLink } from 'reactstrap'\nimport { LogoutSuccess, LogoutFailure } from '../redux/login/action'\nimport { CLIENT_ID } from '../constants'\nimport { connect } from 'react-redux'\n// const { signout } = useGoogleLogout({\n//     clientId: CLIENT_ID,\n//     onLogoutSuccess: LOGOUT_SUCCESS,\n//     onFailure: LOGOUTFAILURE\n// })\nclass GoogleLogoutButton extends React.Component{\n    constructor(props) {\n        super (props)\n        this.state={\n            isLoggedIn:props.isLoggedIn\n        }\n    }\n    logout=(response)=>{\n        console.log(response)\n        this.props.LogoutSuccess()\n    }\n\n    logoutfail=()=> {\n        this.props.LogoutFailure()\n    }\n    \n    render (){\n    if (this.props.isLoggedIn) {\n        return (\n            <GoogleLogout\n            clientId={CLIENT_ID} \n            buttonText=\"Logout\"\n            onLogoutSuccess={this.logout}\n            onFailure={this.logoutfail}\n            render={ (renderProps) => (<NavLink onClick={renderProps.onClick} disabled={renderProps.disabled}>Logout</NavLink>)}\n            >\n            \n            </GoogleLogout>\n        )\n    }\n    return (<></>)\n}\n}\n\nconst mapStateToProps = (state) => ({\n    isLoggedIn: state.login.isLoggedIn\n})\n\nexport default connect(mapStateToProps, { LogoutSuccess, LogoutFailure })(GoogleLogoutButton)","import React from 'react'\nimport {Container, Navbar, NavbarBrand} from 'reactstrap'\nimport {connect} from 'react-redux'\nimport GoogleLogoutButton from './GoogleLogoutButton'\nclass Header extends React.Component {\n    render () {\n\n        return (\n        <header>\n            <Navbar light expand=\"md\" color=\"white\" className=\"border-bottom box-shadow mb-3\">\n                <Container className=\"text-center\">\n                    <NavbarBrand href=\"/\">KTorAssignment</NavbarBrand>\n                </Container>\n                <GoogleLogoutButton></GoogleLogoutButton>\n                </Navbar>\n        </header>\n        )\n    }\n}\n\n\nconst mapStateToProps=(state) => ({\n    isLoggedIn:state.isLoggedIn\n})\n\nexport default connect(mapStateToProps) (Header)","import React from 'react'\nimport {GoogleLogin} from 'react-google-login'\nimport {CLIENT_ID} from '../constants'\nimport { LoginFailure, LoggingIn } from '../redux/login/action'\nimport {connect} from 'react-redux'\nimport { Button } from 'reactstrap'\n\nclass GoogleLoginButton extends React.Component{\n    constructor(props) {\n      super(props)\n    }\n    login=(response)=> {\n        \n        this.props.LoggingIn(response)\n        //console.log(LOGIN_SUCCESS(response.accessToken))\n        console.log(this.props.isLoggedIn)\n    } \n\n\n    handleLoginFailure =(response) =>{\n        console.log(response)\n        this.props.LoginFailure(response)\n      }\n    \n\n    render(){\n      if (!this.props.isLoggedIn)\n        return (\n            <GoogleLogin\n              clientId={ CLIENT_ID }\n              buttonText='Login'\n              onSuccess={ this.login }\n              onFailure={ this.handleLoginFailure }\n              //cookiePolicy={ 'single_host_origin' }\n              render={(renderProps)=>(<Button color=\"primary\" outline style={{width:\"100%\"}} onClick={renderProps.onClick} disabled={renderProps.disabled}>Sign In with Google</Button>)}\n            />\n        )\n      return null\n    }\n      \n      \n}\n\nconst mapStateToProps = (state) => {\n      return {isLoggedIn: state.login.isLoggedIn}\n  \n}\nconst mapDispatchToProps=(dispatch)=>({\n    LoggingIn:(response)=>{dispatch(LoggingIn(response))},\n    LoginFailure:(error)=>{dispatch(LoginFailure(error))}\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(GoogleLoginButton)","import React from 'react'\nimport { Redirect, withRouter } from 'react-router-dom';\nimport { Container, Row, Col } from 'reactstrap';\nimport GoogleLoginButton from 'components/GoogleLoginButton';\nimport { connect } from 'react-redux';\n\nclass Index extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        console.log(this.props.isLoggedIn)\n        if (!this.props.isLoggedIn)\n        return (\n            <Container>\n                <Row>\n                    <Col className=\"pt-3\" xs={{ size: 8, offset: 2 }} sm={7} md={{ size: 4, offset: 8 }} style={{ textAlign: \"center\", backgroundColor: \"white\", height: \"300px\" }}>\n                        <GoogleLoginButton></GoogleLoginButton>\n                    </Col>\n                </Row>\n            </Container>\n        )\n        return (<Redirect to=\"/home\"></Redirect>)\n    }\n}\n\nconst mapStateToProps = (state)=> ({\n    isLoggedIn: state.login.isLoggedIn\n})\n\nexport default withRouter(connect(mapStateToProps)(Index))","import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nclass Home extends React.Component {\n    constructor(props){\n        super(props)\n        \n    }\n    render () {\n        return (<div>Home</div>)\n    }\n}\n\nexport default withRouter(Home)","import React from 'react'\nimport { withRouter } from 'react-router-dom'\nclass Profile extends React.Component {\n\n    render () {\n        return (<div>Profile</div>)\n    }\n}\n\nexport default withRouter(Profile)","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport {connect} from 'react-redux'\nclass AuthenticatedRoute extends React.Component {\n    render () {\n\n        if (this.props.isLoggedIn){\n            return (<Route {...this.props} ></Route>)\n        }\n        return (<Redirect to=\"/\"></Redirect>)\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    isLoggedIn:state.login.isLoggedIn\n})\n\nexport default connect(mapStateToProps)(AuthenticatedRoute)","import React from 'react';\nimport 'static/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport background from  'static/background.jpg'\nimport Header from './components/Header';\nimport { Switch,Route } from 'react-router-dom';\nimport Index from 'routes/index'\nimport Home from 'routes/home'\nimport Profile from 'routes/profile'\nimport AuthenticatedRoute from 'components/AuthenticatedRoute';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{backgroundImage:`url(${background})`,backgroundSize:\"cover\",height:\"100vh\"}}>\n      <Header></Header>\n      <Switch>\n          <AuthenticatedRoute path=\"/home\" component={Home}></AuthenticatedRoute>\n          <AuthenticatedRoute path=\"/profile\" component={Profile}></AuthenticatedRoute>\n          <Route path=\"/\" component={Index}></Route>\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import LoginConsts from \"./action.types\";\nexport const initState={\n    isLoggedIn:false,\n    accessToken:'',\n    errorMsg:null,\n    loggingIn:false\n}\nexport const loginReducer = (state=initState    ,action) => {\n    switch(action.type){\n        case LoginConsts.LOGIN_SUCCESS:\n            return {...state,isLoggedIn:true, accessToken:action.payload,errorMsg:null,loggingIn:false}\n        case LoginConsts.LOGIN_FAILED:\n            return {...state,isLoggedIn:false,accessToken:'',errorMsg:action.payload,loggingIn:false}\n        case LoginConsts.LOGGING_IN:\n            return {...state,isLoggedIn:false, accessToken:'',errorMsg:null,loggingIn:true}\n        case LoginConsts.LOGOUT_SUCCESS:\n            return {...state,isLoggedIn:false,accessToken:'',errorMsg:null,loggingIn:false}\n        case LoginConsts.LOGOUT_FAILED:\n            return {...state,isLoggedIn:true,errorMsg:action.payload}\n        default :\n            return state\n    }\n\n}","import { call,takeEvery,put} from 'redux-saga/effects'\nimport { LoggingIn, LoginFailure, LoginSuccess } from './action'\nimport LoginConsts from './action.types'\n\n\nfunction* loginWithServer(action){\n        \n        try {\n        let loginToken=yield fetch(\"/login\",\n        {\n          method:\"post\",\n          headers:{\n              \"Content-Type\":\"application/json\"\n          },\n          body:JSON.stringify({\"access-token\":action.payload})\n        }).then(response => response.json())\n        .catch((error)=>{\n            throw error\n        })\n        localStorage.setItem(\"AuthorizationJWT\",loginToken)\n        yield put (LoginSuccess(loginToken))\n        }catch(error) {\n            yield put(LoginFailure(error))\n        }\n\n    \n}\n\nfunction* LoginWithServer () {\n    yield takeEvery(LoginConsts.LOGGING_IN,loginWithServer)\n}\n\nexport default LoginWithServer","const UserConsts = {\n    LOAD_USER_SUCCESS:\"LoadUserSuccess\",\n    LOAD_USER_FAILED: \"LoadUserFailure\",\n    LOADING_USER:\"LoadingUser\",\n\n}\n\nexport default UserConsts","import UserConsts from './action.types'\nexport const LoadUser=() => ({\n    type:UserConsts.LOADING_USER\n})\nexport const LoadUserSuccess=(user) => ({\n    type:UserConsts.LOAD_USER_SUCCESS,\n    payload:user\n})\nexport const LoadUserFailure=(error) => ({\n    type:UserConsts.LoadUserFailure,\n    payload:error.error\n})","import {call, put, takeEvery} from 'redux-saga/effects'\nimport { LoadUserSuccess,LoadUserFailure } from './action'\nimport UserConsts from './action.types'\n\nfunction* loadUser(action){\n    try {\n    let user=yield fetch(\"/user\",{\n        headers:{\n            \"Authorization\":`Bearer ${localStorage.getItem(\"AuthorizationJWT\")}`   \n        },\n        method:\"get\"\n    }).then(response=> response.json())\n    .catch(error=> {\n        throw error\n    })\n    yield put (LoadUserSuccess(user))\n    }\n    catch(error) {\n        yield put (LoadUserFailure(error))\n    }\n}\n\nfunction* LoadUser(){\n    yield takeEvery(UserConsts.LOADING_USER,loadUser)\n}\n\nexport default LoadUser","import {createStore,combineReducers, applyMiddleware} from 'redux';\nimport createSagaMiddleware from 'redux-saga'\nimport {all} from 'redux-saga/effects'\nimport {loginReducer} from './login/reducer'\nimport logger from 'redux-logger'\nimport Thunk from 'redux-thunk'\nimport LoginSaga from './login/saga'\nimport UserSaga from './user/saga'\nconst sagaMiddleWare = createSagaMiddleware()\nconst store= createStore(\n    combineReducers({\n        login:loginReducer\n    }),\n    applyMiddleware(sagaMiddleWare,logger)\n)\nconst sagas=function* () {\n    yield all ([LoginSaga(),\n    UserSaga()])\n}\nsagaMiddleWare.run(sagas)\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './static/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport store from './redux/store';\nimport {HashRouter} from 'react-router-dom'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}